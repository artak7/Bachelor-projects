temp= flagdata[7]
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[2:17,19:28], normalize))
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", sep=" ") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[2:17,19:28], normalize))
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[2], normalize))
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[3], normalize))
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[1:30], normalize))
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[2:17, 19:27], normalize))
flag = flag[-7]
flag[30] = flagdata[7]
flag[31] = flag[7]
flag = append(flag, flag[7])
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[2:17, 19:27], normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[7])
flag = flag[-7]
flag
# Нормализуем данные
flag <- as.data.frame(lapply(flagdata[c(2:17, 19:27)], normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[7])
flag = flag[-7]
flag
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
flag = flagdata[c(2:17, 19:28)]
flag
flag <- as.data.frame(lapply(flag, normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[7])
flag = flag[-7]
flag
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
flag = flagdata[c(2:17, 19:28)]
flag
flag <- as.data.frame(lapply(flag, normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[7])
flag = flag[-7]
flag
# Нормализуем данные
flag = flagdata[c(2:17, 19:28)]
flag
flag <- as.data.frame(lapply(flag, normalize))
# Нормализуем данные
flag = flagdata[c(2:17, 19:28)]
# -переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
flag
flag <- as.data.frame(lapply(flag, normalize))
flag
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[30]))*100, digits = 1)
# Чтобы обеспечить репрезентативность выборки, перемешаем её
set.seed(12345)
flagdata_mixed=flag[order(runif(n_data)),]
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[27]))*100, digits = 1)
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag[1:25], normalize))
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
# Чтобы обеспечить репрезентативность выборки, перемешаем её
set.seed(12345)
flagdata_mixed=flag[order(runif(n_data)),]
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# Нормализуем данные
flag <- as.data.frame(lapply(flag[c(1:5,7:26)], normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, flag[6])
flag = flag[-6]
flag
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, predictor)
flag
# переместим перменную отклика в конец для удобства
flag = append(flag, predictor)
flag
flag = flag[-27]
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
# Чтобы обеспечить репрезентативность выборки, перемешаем её
set.seed(12345)
flagdata_mixed=flag[order(runif(n_data)),]
flag
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
# переместим перменную отклика в конец для удобства
flag = append(flag, predictor)
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
# Чтобы обеспечить репрезентативность выборки, перемешаем её
set.seed(12345)
flagdata_mixed=flag[order(runif(n_data)),]
flagdata_mixed=flag[, order(runif(n_data))]
flagdata_mixed=flag[order(runif(n_data))]
# Выберем обучающую выборку
train_data = flagdata_mixed[1:n_train,]
flagdata_mixed
# Выберем обучающую выборку
train_data = flagdata_mixed[1:n_train,]
# Выберем обучающую выборку
train_data = flagdata_mixed[1:n_train]
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[,26]
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[26] # ,26
# Подсчитаем частоту присутствия каждого класса в обучающей выборке
# и сравним с соответствующими частотами в исходной выборке
round(prop.table(table(train_data[27]))*100, digits = 1)
# Подсчитаем частоту присутствия каждого класса в обучающей выборке
# и сравним с соответствующими частотами в исходной выборке
round(prop.table(table(train_data[26]))*100, digits = 1)
flagdata_mixed=flag[order(runif(n_data)),] #,
# Выберем обучающую выборку
train_data = flagdata_mixed[1:n_train] #,
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[26] # ,26
# Подсчитаем частоту присутствия каждого класса в обучающей выборке
# и сравним с соответствующими частотами в исходной выборке
round(prop.table(table(train_data[26]))*100, digits = 1)
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[б26] # ,26
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[,26] # ,26
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
flagdata[1,]
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
flag
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
class(flag)
# Нормализуем данные
flag <- lapply(flag, normalize)
class(flag)
flag
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
class(flagdata)
# Нормализуем данные
flag <- t(as.data.frame(lapply(flag, normalize)))
flag
# Нормализуем данные
flag <- as.data.frame(t(lapply(flag, normalize)))
flag
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
flag = t(flag)
flag
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# Нормализуем данные
flag <- apply(flag, normalize)
# Нормализуем данные
flag <- apply(flag, 2, normalize)
flag
# Нормализуем данные
# flag <- as.data.frame(lapply(flag, normalize))
flag <- as.data.frame(lapply(flag, normalize))
flag
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# Нормализуем данные
# flag <- as.data.frame(lapply(flag, normalize))
flag <- as.data.frame(lapply(flag, normalize))
flag
# переместим перменную отклика в конец для удобства
flag = append(flag, predictor)
flag
predictor
# переместим перменную отклика в конец для удобства
flag = c(flag, predictor)
flag
flagdata
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
flag
# переместим перменную отклика в конец для удобства
flag = c(flag, predictor)
flag
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
# переместим перменную отклика в конец для удобства
flag = rbind(flag, predictor)
# исключим не численные факторы
flag = flagdata[c(2:17, 19:28)]
# переменная отклика - 6 столбец (v7)
predictor = flag[6]
flag = flag[-6]
# переместим перменную отклика в конец для удобства
flag = rbind(flag, predictor)
flag
predictor
length(flag)
length(flag[,1])
# переместим перменную отклика в конец для удобства
flag = rbind(flag, predictor)
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# исключим не численные факторы
flag = flagdata[c(2:5, 7:17, 19:28)]
# Нормализуем данные
flag <- as.data.frame(lapply(flag, normalize))
flag
# переместим перменную отклика в конец для удобства
# flag = rbind(flag, predictor)
flag[26] = flagdata[7]
flag
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task3 kNN")
getwd()
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
# исключим не численные факторы и переменную отклика
flag <- as.data.frame(lapply(c(2:6, 8:17, 19:28), normalize))
# добавим перменную отклика в конец для удобства
flag[26] = flagdata[7]
flag
# Нормализуем данные
# исключим не численные факторы и переменную отклика
flag <- as.data.frame(lapply(flagdata[c(2:6, 8:17, 19:28)], normalize))
# добавим перменную отклика в конец для удобства
flag[26] = flagdata[7]
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
n_train = 110
# Подсчитаем частоты встречаемости классов в исходной выборке
# (выразим эти частоты в %, округлив результат до десятых)
round(prop.table(table(flag[26]))*100, digits = 1)
# Чтобы обеспечить репрезентативность выборки, перемешаем её
set.seed(12345)
flagdata_mixed=flag[order(runif(n_data))] #,
flagdata_mixed=flag[order(runif(n_data)),] #,
flagdata_mixed
# Выберем обучающую выборку
train_data = flagdata_mixed[1:n_train,]
# Сохраним номера классов для строк обучающей выборки
train_data_labels = train_data[,26]
# Подсчитаем частоту присутствия каждого класса в обучающей выборке
# и сравним с соответствующими частотами в исходной выборке
round(prop.table(table(train_data[26]))*100, digits = 1)
# Оставшуюся часть "перемешанной выборки" будем использовать
# как тестовую выборку
test_data = flagdata_mixed[(n_train+1):n_data, ]
test_data_labels = test_data[,26]
# Удалим из обучающей и тестовой выборок столбец с номерами классов
train_data = train_data[-26]
test_data = test_data[-26]
# Подключим пакет class
library("class")
data_test_pred <- knn(train = train_data,
test = test_data,
cl = train_data_labels,
k = round(sqrt(n_train)))
# Вызовем метод knn для тестовых данных
# Результат (номера классов) запишем в вектор data_test_pred
# Для оценки качества прогноза
# подключим библиотеку gmodels
library("gmodels")
install.packages("gmodels")
# Вызовем метод knn для тестовых данных
# Результат (номера классов) запишем в вектор data_test_pred
# Для оценки качества прогноза
# подключим библиотеку gmodels
library("gmodels")
# Построим кросс-валидационную таблицу:
CrossTable(x = test_data_labels, y = data_test_pred, prop.chisq=FALSE)
predict = predict[c(2:6, 8:17, 19:28)]
# Зададим новые данные
predict <- read.csv("predict.txt", sep=",", head=FALSE)
predict = predict[c(2:6, 8:17, 19:28)]
# Определим значение переменной отклика (номер класса) для новых данных
new_predict <- knn(train = train_data,
test = predict,
cl = train_data_labels,
k = round(sqrt(n_train)))
new_predict
predict = as.data.frame(lapply(predict[c(2:6, 8:17, 19:28)], normalize))
# Зададим новые данные
predict <- read.csv("predict.txt", sep=",", head=FALSE)
predict = as.data.frame(lapply(predict[c(2:6, 8:17, 19:28)], normalize))
# Определим значение переменной отклика (номер класса) для новых данных
new_predict <- knn(train = train_data,
test = predict,
cl = train_data_labels,
k = round(sqrt(n_train)))
# Определим значение переменной отклика (номер класса) для новых данных
new_predict <- knn(train = train_data,
test = predict,
cl = train_data_labels,
k = round(sqrt(n_train)))
# Зададим новые данные
predict <- read.csv("predict.txt", sep=",", head=FALSE)
predict = as.data.frame(lapply(predict[c(2:6, 8:17, 19:28)], normalize))
# Определим значение переменной отклика (номер класса) для новых данных
new_predict <- knn(train = train_data,
test = predict,
cl = train_data_labels,
k = round(sqrt(n_train)))
data_test_pred
length(data_test_pred)
length(test_data_labels)
# Прочитаем файл с данными в переменную flagdata
flagdata <- read.csv("flagData.txt", head = FALSE, sep=",") #, sep="\t"
flagdata
# Формула нормализации данных
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
# Нормализуем данные
# исключим не численные факторы и переменную отклика
flag <- as.data.frame(lapply(flagdata[c(2:6, 8:17, 19:28)], normalize))
# добавим перменную отклика в конец для удобства
flag[26] = flagdata[7]
flag
# Сохраним объём всей выборки и объём обучающей выборки в переменных
n_data = 194
