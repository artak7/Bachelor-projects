q()
plot(1,20)
plot(10, 23)
library(RODBC)
m = odbcConnect(db,uid="16393",pwd="123456")
m = odbcConnect("db",uid="16393",pwd="123456")
# m = odbcConnect("db",uid="16393",pwd="123456")
m = odbcConnect("tabler",uid="16394",pwd="123456")
library(RODBC)
m = odbcConnect("db",uid="16393",pwd="123456")
setwd("C://Users/pc/Documents/Магистратура/R")
setwd("C://Users/pc/Documents/Магистратура/R")
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task6 Log1")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
# и подлинность банкноты(столбец 5)
bankdata = bankdata[c(1, 5)]
variance = bankdata[,1]
authenticity = bankdata[,2]
# Чтобы задать размеры облака, нанесём на график все точки, но сделаем их невидимыми
plot(variance, authenticity, type="n", main="Зависимость подлинности банкноты от дисперсии изображения")
# Определим размер выборки (число банкнот)
n = length(variance)
for(i in 1:n)
{
color = ifelse(authenticity[i]==1, "blue", "red") # цвет точки
points(variance[i], authenticity[i], type="p",pch=16, col = color, add = "TRUE")
}
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance","Authenticity")
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
# Вызовем метод максимизации функции правдоподобия glm
mymodel<-glm(formula = Authenticity ~ Variance, family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
Teta
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task6 Log1")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
# и подлинность банкноты(столбец 5)
bankdata = bankdata[c(1, 5)]
variance = bankdata[,1]
variance = bankdata[,1]
authenticity = bankdata[,2]
# Чтобы задать размеры облака, нанесём на график все точки, но сделаем их невидимыми
plot(variance, authenticity, type="n", main="Зависимость подлинности банкноты от дисперсии изображения")
# Определим размер выборки (число банкнот)
n = length(variance)
n
for(i in 1:n)
{
color = ifelse(authenticity[i]==1, "blue", "red") # цвет точки
points(variance[i], authenticity[i], type="p",pch=16, col = color, add = "TRUE")
}
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance","Authenticity")
bankdata
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
B
# Вызовем метод максимизации функции правдоподобия glm
mymodel<-glm(formula = Authenticity ~ Variance, family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
Teta
# Для удобства напишем функцию
fexp = function (x)
{
vspom = exp(Teta[1]+Teta[2]*x);
return ( vspom/(1+vspom) )
}
#Совместим логистическую кривую с облаком точек
curve(fexp(x),-9, 9, col = "Orange", lwd = 3, add=TRUE)
# Определим подлинность новых банкнот
# с дисперсией изображения -3.5, 3.95, 1.5, -1.8, 0.4
newBanknote = c(-3.5, 3.95, 1.5, -1.8, 0.4)
newBanknote
newy = fexp(newBanknote)
# Нанесём новые точки на график
points(newBanknote, newy, col="Purple",type="p",pch=16,add=TRUE)
# Для наглядности построим вспомогательные линии
nline = length(newBanknote)
for(i in 1:nline)
{
segments(newBanknote[i],0, newBanknote[i],newy[i], col="gray",add="TRUE")
segments(newBanknote[i], newy[i], -9, newy[i],col="gray",add="TRUE")
}
for(i in 1:nline)
{
segments(trainBanknote[i],0, trainBanknote[i],trainy[i], col="gray",add="TRUE")
segments(trainBanknote[i], trainy[i], -9, trainy[i],col="gray",add="TRUE")
}
solutions = matrix(1:(nnew*2),ncol=2)
# Запишем в первый столбец матрицы solutions значения дисперсии изображений новых банкнот
solutions[,1] = newBanknote
# Запишем во второй столбец матрицы solutions значения переменной отклика (вероятность того, что банкнота подлинна) для новых банкнот
solutions[,2] = newy
# Сохраним матрицу как фрейм данных
answer = as.data.frame(solutions)
# Добавим заголовки
colnames(answer) = c("Дисперсия изображения", "Подлинность банкноты")
answer
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task6 Log1")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
# и подлинность банкноты(столбец 5)
bankdata = bankdata[c(1, 5)]
bankdata
variance = bankdata[,1]
variance
authenticity = bankdata[,2]
authenticity
# Чтобы задать размеры облака, нанесём на график все точки, но сделаем их невидимыми
plot(variance, authenticity, type="n", main="Зависимость подлинности банкноты от дисперсии изображения")
# Определим размер выборки (число банкнот)
n = length(variance)
n
for(i in 1:n)
{
color = ifelse(authenticity[i]==1, "blue", "red") # цвет точки
points(variance[i], authenticity[i], type="p",pch=16, col = color, add = "TRUE")
}
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance","Authenticity")
bankdata
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
B
# Вызовем метод максимизации функции правдоподобия glm
mymodel<-glm(formula = Authenticity ~ Variance, family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
Teta
# Для удобства напишем функцию
fexp = function (x)
{
vspom = exp(Teta[1]+Teta[2]*x);
return ( vspom/(1+vspom) )
}
#Совместим логистическую кривую с облаком точек
curve(fexp(x),-9, 9, col = "Orange", lwd = 3, add=TRUE)
# Определим подлинность новых банкнот
# с дисперсией изображения -3.5, 3.95, 1.5, -1.8, 0.4
newBanknote = c(-3.5, 3.95, 1.5, -1.8, 0.4)
newBanknote
newy = fexp(newBanknote)
# Нанесём новые точки на график
points(newBanknote, newy, col="Purple",type="p",pch=16,add=TRUE)
# Для наглядности построим вспомогательные линии
nline = length(newBanknote)
for(i in 1:nline)
{
segments(newBanknote[i],0, newBanknote[i],newy[i], col="gray",add="TRUE")
segments(newBanknote[i], newy[i], -9, newy[i],col="gray",add="TRUE")
}
# Определим подлинность банкнот из обучающей выборки
# с дисперсией изображения -6.7387, -5.0477, -0.7351, 4.1711, 1.7939, 2.6606
trainBanknote = c(-6.7387, -5.0477, -0.7351, 4.1711, 1.7939, 2.6606)
trainBanknote
trainy = fexp(trainBanknote)
# Нанесём новые точки на график
points(trainBanknote, trainy, col="Green",type="p",pch=16,add=TRUE)
# Для наглядности построим вспомогательные линии
nline = length(trainBanknote)
for(i in 1:nline)
{
segments(trainBanknote[i],0, trainBanknote[i],trainy[i], col="gray",add="TRUE")
segments(trainBanknote[i], trainy[i], -9, trainy[i],col="gray",add="TRUE")
}
solutions = matrix(1:(nnew*2),ncol=2)
# Запишем в первый столбец матрицы solutions значения дисперсии изображений новых банкнот
solutions[,1] = newBanknote
# Запишем во второй столбец матрицы solutions значения переменной отклика (вероятность того, что банкнота подлинна) для новых банкнот
solutions[,2] = newy
# Сохраним матрицу как фрейм данных
answer = as.data.frame(solutions)
# Добавим заголовки
colnames(answer) = c("Дисперсия изображения", "Подлинность банкноты")
answer
#аналогично для банкнот из обучающей выборки
train_solutions = matrix(1:(nline*2),ncol=2)
train_solutions[,1] = trainBanknote
train_solutions[,2] = trainy
# Сохраним матрицу как фрейм данных
train_answer = as.data.frame(train_solutions)
# Добавим заголовки
colnames(train_answer) = c("Дисперсия изображения", "Подлинность банкноты")
train_answer
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task6 Log1")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
# и подлинность банкноты(столбец 5)
bankdata = bankdata[c(1, 5)]
variance = bankdata[,1]
authenticity = bankdata[,2]
# Чтобы задать размеры облака, нанесём на график все точки, но сделаем их невидимыми
plot(variance, authenticity, type="n", main="Зависимость подлинности банкноты от дисперсии изображения")
# Определим размер выборки (число банкнот)
n = length(variance)
n
for(i in 1:n)
{
color = ifelse(authenticity[i]==1, "blue", "red") # цвет точки
points(variance[i], authenticity[i], type="p",pch=16, col = color, add = "TRUE")
}
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance","Authenticity")
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
# Вызовем метод максимизации функции правдоподобия glm
mymodel<-glm(formula = Authenticity ~ Variance, family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
mymodel
solutions = matrix(1:(nnew*2),ncol=2)
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task6 Log1")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
# и подлинность банкноты(столбец 5)
bankdata = bankdata[c(1, 5)]
bankdata
variance = bankdata[,1]
variance
authenticity = bankdata[,2]
# Чтобы задать размеры облака, нанесём на график все точки, но сделаем их невидимыми
plot(variance, authenticity, type="n", main="Зависимость подлинности банкноты от дисперсии изображения")
# Определим размер выборки (число банкнот)
n = length(variance)
n
for(i in 1:n)
{
color = ifelse(authenticity[i]==1, "blue", "red") # цвет точки
points(variance[i], authenticity[i], type="p",pch=16, col = color, add = "TRUE")
}
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance","Authenticity")
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
# Вызовем метод максимизации функции правдоподобия glm
# glm - generalized linear model
mymodel<-glm(formula = Authenticity ~ Variance, family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
# Для удобства напишем функцию
fexp = function (x)
{
vspom = exp(Teta[1]+Teta[2]*x);
return ( vspom/(1+vspom) )
}
#Совместим логистическую кривую с облаком точек
curve(fexp(x),-9, 9, col = "Orange", lwd = 3, add=TRUE)
# Определим подлинность новых банкнот
# с дисперсией изображения -3.5, 3.95, 1.5, -1.8, 0.4
newBanknote = c(-3.5, 3.95, 1.5, -1.8, 0.4)
newBanknote
newy = fexp(newBanknote)
# Нанесём новые точки на график
points(newBanknote, newy, col="Purple",type="p",pch=16,add=TRUE)
# Для наглядности построим вспомогательные линии
nline = length(newBanknote)
for(i in 1:nline)
{
segments(newBanknote[i],0, newBanknote[i],newy[i], col="gray",add="TRUE")
segments(newBanknote[i], newy[i], -9, newy[i],col="gray",add="TRUE")
}
{
segments(newBanknote[i],0, newBanknote[i],newy[i], col="gray",add="TRUE")
segments(newBanknote[i], newy[i], -9, newy[i],col="gray",add="TRUE")
}
# Определим подлинность банкнот из обучающей выборки
# с дисперсией изображения -6.7387, -5.0477, -0.7351, 4.1711, 1.7939, 2.6606
trainBanknote = c(-6.7387, -5.0477, -0.7351, 4.1711, 1.7939, 2.6606)
trainBanknote
trainy = fexp(trainBanknote)
# Нанесём новые точки на график
points(trainBanknote, trainy, col="Green",type="p",pch=16,add=TRUE)
# Для наглядности построим вспомогательные линии
nline = length(trainBanknote)
for(i in 1:nline)
{
segments(trainBanknote[i],0, trainBanknote[i],trainy[i], col="gray",add="TRUE")
segments(trainBanknote[i], trainy[i], -9, trainy[i],col="gray",add="TRUE")
}
solutions = matrix(1:(nnew*2),ncol=2)
solutions = matrix(1:(nline*2),ncol=2)
solutions
# Запишем в первый столбец матрицы solutions значения дисперсии изображений новых банкнот
solutions[,1] = newBanknote
newBanknote
nline
# Для наглядности построим вспомогательные линии
nnew = length(newBanknote)
solutions = matrix(1:(nnew*2),ncol=2)
solutions
# Запишем в первый столбец матрицы solutions значения дисперсии изображений новых банкнот
solutions[,1] = newBanknote
# Запишем во второй столбец матрицы solutions значения переменной отклика (вероятность того, что банкнота подлинна) для новых банкнот
solutions[,2] = newy
solutions
# Сохраним матрицу как фрейм данных
answer = as.data.frame(solutions)
# Добавим заголовки
colnames(answer) = c("Дисперсия изображения", "Подлинность банкноты")
answer
#аналогично для банкнот из обучающей выборки
train_solutions = matrix(1:(nline*2),ncol=2)
train_solutions[,1] = trainBanknote
train_solutions[,2] = trainy
# Сохраним матрицу как фрейм данных
train_answer = as.data.frame(train_solutions)
# Добавим заголовки
colnames(train_answer) = c("Дисперсия изображения", "Подлинность банкноты")
train_answer
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task7 Log2")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
bankdata = bankdata[-3]
bankdata
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance", "Skewness", "Entropy",  "Authenticity")
bankdata
# Представим озаглавленные данные bankdata как таблицу
B<-as.data.frame(bankdata)
B
# Вызовем метод максимизации функции правдоподобия glm
mymodel<-glm(formula = Authenticity ~ Variance + Skewness + Entropy,
family = binomial, data = B)
# Запишем найденные коэффициенты в вектор Teta
Teta=coef(mymodel)
Teta
mymodel
# Определим подлинность новых банкнот
newBanknote <- read.csv("new_banknote.txt", sep=",", head=FALSE)
# Озаглавим столбцы newBanknote
colnames(newBanknote)<-c("Variance", "Skewness", "Entropy")
newBanknote
newPredict<-predict(mymodel,
newdata = newBanknote,
type="response")
newPredict
# Число новых банкнот
nnew = length(newBanknote[,1])
nnew
solutions = matrix(1:(nnew*4),ncol=4)
solutions[,1] = newBanknote[,1]
solutions[,2] = newBanknote[,2]
solutions[,3] = newBanknote[,3]
solutions[,4] = newPredict
# Сохраним матрицу как фрейм данных
answer = as.data.frame(solutions)
# Добавим заголовки
colnames(answer) = c("Дисперсия", " Коэффициент асимметрии", "Энтропия", "Подлинность банкноты")
answer
# Определим подлинность банкнот из обучающей выборки
trainBanknote <- read.csv("train_banknote.txt", sep=",", head=FALSE)
# Озаглавим столбцы trainBanknote
colnames(trainBanknote)<-c("Variance", "Skewness", "Entropy")
trainBanknote
trainPredict<-predict(mymodel,
newdata = trainBanknote,
type="response")
trainPredict
# Число новых банкнот
nlen = length(trainBanknote[,1])
nlen
#аналогично для банкнот из обучающей выборки
train_solutions = matrix(1:(nlen*4),ncol=4)
train_solutions[,1] = trainBanknote[,1]
train_solutions[,2] = trainBanknote[,2]
train_solutions[,3] = trainBanknote[,3]
train_solutions[,4] = trainPredict
# Сохраним матрицу как фрейм данных
train_answer = as.data.frame(train_solutions)
# Добавим заголовки
colnames(train_answer) = c("Дисперсия", " Коэффициент асимметрии", "Энтропия", "Подлинность банкноты")
train_answer
setwd("C://Users/pc/Documents/Магистратура/2 семестр/R/task7 Log2")
getwd()
#очищаем рабочее пространство
rm (list=ls())
# Прочтём данные о банкнотах
bankdata <- read.csv("banknote.txt", sep=",", head=FALSE)
bankdata = bankdata[-3]
bankdata
# Озаглавим столбцы bankdata
colnames(bankdata)<-c("Variance", "Skewness", "Entropy",  "Authenticity")
